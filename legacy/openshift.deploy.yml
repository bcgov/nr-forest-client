apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nr-forest-client-legacy
  - name: COMPONENT
    description: Component name
    value: legacy
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/nr-forest-client-legacy:prod-backend
  - name: FOREST_API_URL
    description: Forest Client service api url
    required: true
  - name: ORACLEDB_USER
    description: Oracle database user name
    required: true
  - name: ORACLEDB_PASSWORD
    description: Oracle database password
    required: true
  - name: ORACLEDB_DATABASE
    description: Oracle database database name
    required: true
  - name: ORACLEDB_HOST
    description: Oracle database host
    required: true
  - name: ORACLEDB_SERVICENAME
    description: Oracle database service name
    required: true  
  - name: CPU_REQUEST
    value: 75m
  - name: CPU_LIMIT
    value: 200m
  - name: MEMORY_REQUEST
    value: 300Mi
  - name: MEMORY_LIMIT
    value: 400Mi
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    stringData:
      x-api-key: "${X_API_KEY}"
      oracle-user: "${ORACLEDB_USER}"
      oracle-password: "${ORACLEDB_PASSWORD}"
      oracle-database: "${ORACLEDB_DATABASE}"
      oracle-host: "${ORACLEDB_HOST}"
      oracle-service: "${ORACLEDB_SERVICENAME}"
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: NODE_ENV
                  value: ${NODE_ENV}
                - name: FRONTEND_URL
                  value: https://${NAME}-${ZONE}-frontend.${DOMAIN}
                - name: BACKEND_URL
                  value: https://${NAME}-${ZONE}-backend.${DOMAIN}
                - name: LEGACY_URL
                  value: https://${NAME}-${ZONE}-legacy.${DOMAIN}
                - name: X_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: x-api-key
                - name: API_URL
                  value: ${API_URL}
                - name: CHES_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: ches-client-id
                - name: FOREST_API_URL
                  value: ${FOREST_API_URL}
                - name: ORACLEDB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: oracle-password
                - name: ORACLEDB_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: oracle-database
                - name: ORACLEDB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: oracle-host
                - name: ORACLEDB_SERVICENAME
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: oracle-service
                - name: ORACLEDB_PORT
                  value: "1543"

              ports:
                - containerPort: 9000
                  protocol: TCP
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                successThreshold: 1
                failureThreshold: 12
                httpGet:
                  path: /health
                  port: 9000
                  scheme: HTTP
                initialDelaySeconds: 180
                periodSeconds: 30
                timeoutSeconds: 5
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 9000-tcp
          protocol: TCP
          port: 80
          targetPort: 9000
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 9000-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
