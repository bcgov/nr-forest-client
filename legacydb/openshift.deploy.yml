apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Product name
    value: nr-forest-client
  - name: COMPONENT
    description: Component name
    value: legacydb
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: PVC_MOUNT_PATH
    description: Where to mount the PVC, subpath (e.g. data/)
    value: /opt/oracle/oradata
  - name: DB_PVC_SIZE
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Database Volume Capacity
    required: true
    value: 256Mi
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: "DATABASE_DEFAULT_PORT"
    description: "The configured port for the database service"
    value: "1521"
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    required: true
  - name: ORACLEDB_USER_W
    description: Oracle database user name with write permission
    required: true
  - name: ORACLEDB_PASSWORD_W
    description: Oracle database password with write permission
    required: true
  - name: CPU_REQUEST
    value: 500m
  - name: CPU_LIMIT
    value: "1"
  - name: MEMORY_REQUEST
    value: 2Gi
  - name: MEMORY_LIMIT
    value: 2Gi
objects:
  - kind: Secret
    apiVersion: v1    
    metadata:
      name: ${NAME}-${ZONE}
      labels:
        app: ${NAME}-${ZONE}
    stringData:      
      oracle-user-write: ${ORACLEDB_USER_W}
      oracle-password-write: ${ORACLEDB_PASSWORD_W}
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_PVC_SIZE}
      storageClassName: netapp-file-standard
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
      template:
        metadata:
          name: ${NAME}-${ZONE}-${COMPONENT}
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          volumes:
            - name: ${NAME}-${ZONE}-${COMPONENT}
              persistentVolumeClaim:
                claimName: ${NAME}-${ZONE}-${COMPONENT}
          containers:
            - name: ${NAME}
              image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              ports:
                - containerPort: 1521
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - healthcheck.sh
                failureThreshold: 30
                initialDelaySeconds: 120
                periodSeconds: 30
                timeoutSeconds: 5
              livenessProbe:
                exec:
                  command:
                    - healthcheck.sh
                failureThreshold: 30
                initialDelaySeconds: 130
                periodSeconds: 30
                timeoutSeconds: 5
              env:
                - name: APP_USER_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: oracle-password-write
                - name: ORACLE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: oracle-password-write
                - name: APP_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: oracle-user-write
              volumeMounts:
                - name: ${NAME}-${ZONE}-${COMPONENT}
                  mountPath: ${PVC_MOUNT_PATH}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
  - kind: Service
    apiVersion: v1    
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: legacydb
          nodePort: 0
          port: 1521
          protocol: TCP
          targetPort: 1521
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      sessionAffinity: None
      type: ClusterIP
  - kind: CronJob
    apiVersion: batch/v1
    metadata:
      name: flyway-migration-job
    spec:
      schedule: "0 0 31 2 *" # Never runs, will be triggered manually
      jobTemplate:
        spec:
          template:
            spec:
              volumes:
                - name: sql-volume
                  emptyDir: {}
              initContainers:
                - name: setup-sql-scripts
                  image: curlimages/curl:latest  # Use an image that has curl and unzip
                  command: ["/bin/sh", "-c"]
                  args:                  
                  - |
                    # Step 1: Download the SQL scripts from your GitHub repo
                    # TODO: Replace the main with the current branch
                    curl -L https://github.com/bcgov/nr-forest-client/archive/refs/heads/main.zip -o /tmp/sql-scripts.zip
                    
                    # Step 2: Unzip and prepare the scripts                  
                    unzip /tmp/sql-scripts.zip -d /tmp/sql/
                    # Move the SQL scripts to Flyway's location
                    mv /tmp/sql/nr-forest-client-main/legacy/src/test/resources/db/migration/* /flyway/sql/
                  volumeMounts:
                    - name: sql-volume
                      mountPath: /flyway/sql  # Share the same volume as Flyway          
              containers:
                - name: flyway
                  image: flyway/flyway:latest
                  env:
                    - name: HOSTNAME
                      value: ${NAME}-${ZONE}-${COMPONENT}
                    - name: APP_USER_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: oracle-password-write
                    - name: APP_USER
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: oracle-user-write
                  command: ["/bin/sh", "-c"]
                  args:                    
                  - |
                    # Step 3: Run Flyway migration                  
                    flyway migrate -url=jdbc:oracle:thin:@${HOSTNAME}:1521/FREEPDB1 -user=${APP_USER} -password=${APP_USER_PASSWORD} -connectRetries=60
                volumeMounts:
                - name: sql-volume
                  mountPath: /flyway/sql  # Mount the volume where Flyway looks for SQL scripts
              restartPolicy: OnFailure
              volumes:
                - name: sql-volume
                  emptyDir: {}
