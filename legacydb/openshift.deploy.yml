apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Product name
    value: nr-forest-client
  - name: COMPONENT
    description: Component name
    value: legacydb
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: TAG
    description: Image tag to use
    value: latest
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: ORG
    description: Organization name
    value: bcgov
  - name: ORACLEDB_USER_W
    description: Oracle database user name with write permission
    required: true
  - name: ORACLEDB_PASSWORD_W
    description: Oracle database password with write permission
    required: true
  - name: CPU_REQUEST
    value: 125m
  - name: CPU_LIMIT
    value: 500m
  - name: MEMORY_REQUEST
    value: 1Gi
  - name: MEMORY_LIMIT
    value: 2Gi
objects:
  - kind: Secret
    apiVersion: v1    
    metadata:
      name: ${NAME}-${ZONE}
      labels:
        app: ${NAME}-${ZONE}
    stringData:      
      oracle-user-write: ${ORACLEDB_USER_W}
      oracle-password-write: ${ORACLEDB_PASSWORD_W}
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
        appkind: ${NAME}-${COMPONENT}
    spec:
      replicas: 1        
      selector:
        deployment: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
      template:
        metadata:
          name: ${NAME}-${ZONE}-${COMPONENT}
          labels:
            app: ${NAME}-${ZONE}
            deployment: ${NAME}-${ZONE}-${COMPONENT}
        spec:          
          containers:
            - name: ${NAME}
              image: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT}:${TAG}
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              ports:
                - containerPort: 1521
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - healthcheck.sh
                failureThreshold: 30
                initialDelaySeconds: 90
                periodSeconds: 30
                timeoutSeconds: 5
              livenessProbe:
                exec:
                  command:
                    - healthcheck.sh
                failureThreshold: 30
                initialDelaySeconds: 120
                periodSeconds: 30
                timeoutSeconds: 5
              env:
                - name: APP_USER_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: oracle-password-write
                - name: ORACLE_RANDOM_PASSWORD
                  value: "true"
                - name: APP_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: oracle-user-write              
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
  - kind: Service
    apiVersion: v1    
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: legacydb
          nodePort: 0
          port: 1521
          protocol: TCP
          targetPort: 1521
      selector:
        deployment: ${NAME}-${ZONE}-${COMPONENT}
      sessionAffinity: None
      type: ClusterIP
  - kind: NetworkPolicy
    apiVersion: networking.k8s.io/v1
    metadata:
      name: allow-d2723f-dev-legacy-access
      namespace: d2723f-tools
    spec:
      podSelector: 
        matchLabels:
          appkind: ${NAME}-${COMPONENT}  # Only apply to pods with this label in d2723f-tools
      policyTypes:
      - Ingress
      ingress:
      - from:
        - namespaceSelector:
            matchLabels:
              environment: dev  # Restrict to namespace d2723f-dev
              name: d2723f  # Restrict to namespace d2723f-dev
          podSelector:
            matchLabels:
              appkind: legacy  # Further restrict to pods with appkind=legacy
