apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Product name
    value: nr-forest-client
  - name: COMPONENT
    description: Component name
    value: database-backup
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: PVC_MOUNT_PATH
    description: Where to mount the PVC, subpath (e.g. data/)
    value: /var/lib/postgresql
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: "DATABASE_DEFAULT_PORT"
    description: "The configured port for the database service"
    value: "5432"
  - name: "BACKUP_STRATEGY"
    description: "The strategy to use for backups; for example daily, or rolling."
    required: true
    value: "rolling"
  - name: "BACKUP_DIR"
    description: "The name of the root backup directory"
    required: true
    value: "/tmp/backup"
  - name: "NUM_BACKUPS"
    description: "The number of backup files to be retained.  Used for the `daily` backup strategy.  Ignored when using the `rolling` backup strategy."
    required: false
    value: "5"
  - name: "DAILY_BACKUPS"
    description: "The number of daily backup files to be retained.  Used for the `rolling` backup strategy."
    required: false
    value: "7"
  - name: "WEEKLY_BACKUPS"
    description: "The number of weekly backup files to be retained.  Used for the `rolling` backup strategy."
    required: false
    value: "4"
  - name: "MONTHLY_BACKUPS"
    displayName: "Number of Monthly Backups to Retain"
    description: "The number of monthly backup files to be retained.  Used for the `rolling` backup strategy."
    required: false
    value: "1"
  - name: "JOB_SERVICE_ACCOUNT"
    description: "Name of the Service Account To Exeucte the Job As."
    value: "default"
    required: true
  - name: "SUCCESS_JOBS_HISTORY_LIMIT"
    description: "The number of successful jobs that will be retained"
    value: "5"
    required: true
  - name: "FAILED_JOBS_HISTORY_LIMIT"
    description: "The number of failed jobs that will be retained"
    value: "2"
    required: true
  - name: "JOB_BACKOFF_LIMIT"
    description: "The number of attempts to try for a successful job outcome"
    value: "0"
  - name: PVC_SIZE
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    value: 256Mi
  - name: CRON_MINUTES
    description: Random number, 0-60, for scheduling cronjobs
    from: "[0-5]{1}[0-9]{1}"
    generate: expression
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    required: true
objects: 
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${PVC_SIZE}"
      storageClassName: netapp-file-standard
  - kind: CronJob
    apiVersion: "batch/v1"
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
        cronjob: ${NAME}-${ZONE}
    spec:
      schedule: "0 0 * * *"
      concurrencyPolicy: "Replace"
      successfulJobsHistoryLimit: ${{SUCCESS_JOBS_HISTORY_LIMIT}}
      failedJobsHistoryLimit: ${{FAILED_JOBS_HISTORY_LIMIT}}
      jobTemplate:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            cronjob: ${NAME}-${ZONE}
        spec:
          backoffLimit: ${{JOB_BACKOFF_LIMIT}}
          template:
            metadata:
              labels:
                app: ${NAME}-${ZONE}
                cronjob: ${NAME}-${ZONE}
            spec:
              containers:
                - name: ${NAME}-${ZONE}-${COMPONENT}
                  image: ${REGISTRY}/${PROMOTE}
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    pg_dump -U ${POSTGRESQL_USER} -h ${NAME}-${ZONE}-database -d ${POSTGRESQL_DATABASE} --data-only > ${BACKUP_DIR}/backup_$(date +%Y-%m-%d).sql &&
                    find "${BACKUP_DIR}" -type f -mtime +$NUM_BACKUPS -exec rm -f {} \;
                  volumeMounts:
                    - mountPath: "${BACKUP_DIR}"
                      name: ${NAME}-${ZONE}-${COMPONENT}
                  env:
                    - name: BACKUP_DIR
                      value: "${BACKUP_DIR}"
                    - name: NUM_BACKUPS
                      value: "${NUM_BACKUPS}"
                    - name: POSTGRESQL_DATABASE
                      valueFrom:
                        secretKeyRef:
                          name: "${NAME}-${ZONE}"
                          key: "database-name"
                    - name: POSTGRESQL_USER
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: "database-user"
                    - name: POSTGRESQL_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: "database-password"
                    - name: PGPASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: "database-password"
              volumes:
                - name: ${NAME}-${ZONE}-${COMPONENT}
                  persistentVolumeClaim:
                    claimName: ${NAME}-${ZONE}-${COMPONENT}
              restartPolicy: "Never"
              terminationGracePeriodSeconds: 30
              activeDeadlineSeconds: 1600
              dnsPolicy: "ClusterFirst"
              serviceAccountName: "${JOB_SERVICE_ACCOUNT}"
              serviceAccount: "${JOB_SERVICE_ACCOUNT}"
