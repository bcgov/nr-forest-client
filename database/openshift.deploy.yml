apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Product name
    value: nr-forest-client
  - name: COMPONENT
    description: Component name
    value: database
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: TAG
    description: Image tag; e.g. PR number, latest or prod
    required: true
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: ORG
    description: Organization name
    value: bcgov
  - name: PVC_MOUNT_PATH
    description: Where to mount the PVC, subpath (e.g. data/)
    value: /var/lib/postgresql
  - name: DB_PVC_SIZE
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Database Volume Capacity
    required: true
    value: 256Mi
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  ### Backup-Container starts here ###
  - name: BACKUP_COMPONENT
    description: BACKUP_COMPONENT name
    value: database-backup
  - name: "DATABASE_DEFAULT_PORT"
    description: "The configured port for the database service"
    value: "5432"
  - name: "BACKUP_STRATEGY"
    description: "The strategy to use for backups; for example daily, or rolling."
    required: true
    value: "rolling"
  - name: "BACKUP_DIR"
    description: "The name of the root backup directory"
    required: true
    value: "/backups/"
  - name: "NUM_BACKUPS"
    description: "The number of backup files to be retained.  Used for the `daily` backup strategy.  Ignored when using the `rolling` backup strategy."
    required: false
    value: "5"
  - name: "DAILY_BACKUPS"
    description: "The number of daily backup files to be retained.  Used for the `rolling` backup strategy."
    required: false
    value: "7"
  - name: "WEEKLY_BACKUPS"
    description: "The number of weekly backup files to be retained.  Used for the `rolling` backup strategy."
    required: false
    value: "4"
  - name: "MONTHLY_BACKUPS"
    displayName: "Number of Monthly Backups to Retain"
    description: "The number of monthly backup files to be retained.  Used for the `rolling` backup strategy."
    required: false
    value: "1"
  - name: "JOB_SERVICE_ACCOUNT"
    description: "Name of the Service Account To Exeucte the Job As."
    value: "default"
    required: true
  - name: "SUCCESS_JOBS_HISTORY_LIMIT"
    description: "The number of successful jobs that will be retained"
    value: "5"
    required: true
  - name: "FAILED_JOBS_HISTORY_LIMIT"
    description: "The number of failed jobs that will be retained"
    value: "2"
    required: true
  - name: "JOB_BACKOFF_LIMIT"
    description: "The number of attempts to try for a successful job outcome"
    value: "0"
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    name: PVC_SIZE
    value: 256Mi 
  - name: CRON_MINUTES
    description: Random number, 0-60, for scheduling cronjobs
    from: "[0-5]{1}[0-9]{1}"
    generate: expression 
  - name: RANDOM_EXPRESSION
    description: Random expression to make sure deployments update
    from: "[a-zA-Z0-9]{32}"
    generate: expression
objects:
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_PVC_SIZE}
      storageClassName: netapp-file-standard
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
      template:
        metadata:
          name: ${NAME}-${ZONE}-${COMPONENT}
          labels:
            app: ${NAME}-${ZONE}
            deployment: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          volumes:
            - name: ${NAME}-${ZONE}-${COMPONENT}
              persistentVolumeClaim:
                claimName: ${NAME}-${ZONE}-${COMPONENT}
          containers:
            - name: ${NAME}
              image: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT}:${TAG}
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - -c
                    - psql -q -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                timeoutSeconds: 1
              livenessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - -c
                    - psql -q -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                timeoutSeconds: 1
              env:
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: database-name
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: database-password
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: database-user
                - name: RANDOM_EXPRESSION
                  value: ${RANDOM_EXPRESSION}
              volumeMounts:
                - name: ${NAME}-${ZONE}-${COMPONENT}
                  mountPath: ${PVC_MOUNT_PATH}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: postgresql
          nodePort: 0
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        deployment: ${NAME}-${ZONE}-${COMPONENT}
      sessionAffinity: None
      type: ClusterIP

  ### Backup-Container starts here ###

  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: "${PVC_SIZE}"
      storageClassName: netapp-file-standard
  - kind: CronJob
    apiVersion: "batch/v1"
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
        cronjob: ${NAME}-${ZONE}
    spec:
      schedule: "0 0 * * *"
      concurrencyPolicy: "Replace"
      successfulJobsHistoryLimit: ${{SUCCESS_JOBS_HISTORY_LIMIT}}
      failedJobsHistoryLimit: ${{FAILED_JOBS_HISTORY_LIMIT}}
      jobTemplate:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            cronjob: ${NAME}-${ZONE}
        spec:
          backoffLimit: ${{JOB_BACKOFF_LIMIT}}
          template:
            metadata:
              labels:
                app: ${NAME}-${ZONE}
                cronjob: ${NAME}-${ZONE}
            spec:
              containers:
                - name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                  image: postgres:13
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    pg_dump \
                    -U ${POSTGRESQL_USER} \
                    -h ${NAME}-${ZONE}-database \
                    -d ${POSTGRESQL_DATABASE} \
                    -a \
                    --schema=nrfc \
                    --inserts \
                    --no-comments \
                    --on-conflict-do-nothing \
                    --no-sync \
                    --exclude-table=nrfc.client_type_code \
                    --exclude-table=nrfc.submission_status_code \
                    --exclude-table=nrfc.submission_type_code \
                    --exclude-table=nrfc.province_code \
                    --exclude-table=nrfc.country_code \
                    --exclude-table=nrfc.contact_type_code \
                    --exclude-table=nrfc.business_type_code \
                    --exclude-table=nrfc.district_code \
                    --file=${BACKUP_DIR}/backup_$(date +%Y-%m-%d).sql \
                    &&
                    find "${BACKUP_DIR}" -type f -mtime +$NUM_BACKUPS -exec rm -f {} \; &&
                    cp -r ${BACKUP_DIR}/backup_$(date +%Y-%m-%d).sql ${RESTORE_DIR}/W0__restore.sql
                  volumeMounts:
                    - mountPath: "${BACKUP_DIR}"
                      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                    - mountPath: "${RESTORE_DIR}"
                      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                  env:
                    - name: RESTORE_DIR
                      value: "${RESTORE_DIR}"
                    - name: BACKUP_DIR
                      value: "${BACKUP_DIR}"
                    - name: NUM_BACKUPS
                      value: "${NUM_BACKUPS}"
                    - name: POSTGRESQL_DATABASE
                      valueFrom:
                        secretKeyRef:
                          name: "${NAME}-${ZONE}"
                          key: "database-name"
                    - name: POSTGRESQL_USER
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: "database-user"
                    - name: POSTGRESQL_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: "database-password"
                    - name: PGPASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: "database-password"
              volumes:
                - name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                  persistentVolumeClaim:
                    claimName: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
              restartPolicy: "Never"
              terminationGracePeriodSeconds: 30
              activeDeadlineSeconds: 1600
              dnsPolicy: "ClusterFirst"
              serviceAccountName: "${JOB_SERVICE_ACCOUNT}"
              serviceAccount: "${JOB_SERVICE_ACCOUNT}"
  - kind: CronJob
    apiVersion: "batch/v1"
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}-restore
      labels:
        app: ${NAME}-${ZONE}
        cronjob: ${NAME}-${ZONE}
    spec:
      schedule: "0 0 31 2 *"
      concurrencyPolicy: "Replace"
      successfulJobsHistoryLimit: ${{SUCCESS_JOBS_HISTORY_LIMIT}}
      failedJobsHistoryLimit: ${{FAILED_JOBS_HISTORY_LIMIT}}
      jobTemplate:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            cronjob: ${NAME}-${ZONE}
        spec:
          backoffLimit: ${{JOB_BACKOFF_LIMIT}}
          template:
            metadata:
              labels:
                app: ${NAME}-${ZONE}
                cronjob: ${NAME}-${ZONE}
            spec:
              containers:
                - name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}-restore
                  image: postgres:13
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    find ${RESTORE_DIR} -type f -name "*.sql" -print0 | sort -zV |
                      while IFS= read -r -d '' sql_file; do
                        echo "Running SQL file: $sql_file"
                        psql -h ${TARGET_HOST} -U ${POSTGRESQL_USER} -d ${POSTGRESQL_DATABASE} -f $sql_file
                      done
                  volumeMounts:
                    - mountPath: "${RESTORE_DIR}"
                      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                  env:
                    - name: RESTORE_DIR
                      value: "${RESTORE_DIR}"
                    - name: POSTGRESQL_DATABASE
                      valueFrom:
                        secretKeyRef:
                          name: "${NAME}-${ZONE}"
                          key: "database-name"
                    - name: POSTGRESQL_USER
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: "database-user"
                    - name: POSTGRESQL_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: "database-password"
                    - name: PGPASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}
                          key: "database-password"
              volumes:
                - name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                  persistentVolumeClaim:
                    claimName: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
              restartPolicy: "Never"
              terminationGracePeriodSeconds: 30
              activeDeadlineSeconds: 1600
              dnsPolicy: "ClusterFirst"
              serviceAccountName: "${JOB_SERVICE_ACCOUNT}"
              serviceAccount: "${JOB_SERVICE_ACCOUNT}"
