apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nr-forest-client
  - name: COMPONENT
    description: Component name
    value: backend
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: bcgov/nr-old-growth:prod-backend
  - name: CHES_TOKEN_URL
    description: CHES service authentication url
    required: true
  - name: CHES_API_URL
    description: CHES service api url
    required: true
  - name: CPU_REQUEST
    value: 75m
  - name: CPU_LIMIT
    value: 200m
  - name: MEMORY_REQUEST
    value: 150Mi
  - name: MEMORY_LIMIT
    value: 150Mi
  - name: BCREGISTRY_URI
    description: Bc Registry API address
    required: true
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: FRONTEND_URL
                  value: https://${NAME}-${ZONE}-frontend.${DOMAIN}
                - name: LEGACY_URL
                  value: https://${NAME}-${ZONE}-legacy.${DOMAIN}
                - name: CHES_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: ches-client-id
                - name: CHES_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: ches-client-secret
                - name: CHES_TOKEN_URL
                  value: ${CHES_TOKEN_URL}
                - name: CHES_API_URL
                  value: ${CHES_API_URL}
                - name: POSTGRESQL_HOST
                  value: ${NAME}-${ZONE}-database
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: database-name
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: database-password
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: database-user
                - name: BCREGISTRY_URI
                  value: ${BCREGISTRY_URI}
                - name: BCREGISTRY_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: bcregistry-key
                - name: BCREGISTRY_ACCOUNT
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: bcregistry-account
                - name: ADDRESS_COMPLETE_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: address-complete-key
                - name: COGNITO_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: cognito-client-id
                - name: COGNITO_USER_POOL
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: cognito-user-pool
                - name: COGNITO_DOMAIN
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: cognito-domain
                - name: COGNITO_ENVIRONMENT
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: cognito-environment
                - name: COGNITO_REDIRECT_URI
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: cognito-redirect-uri
                - name: COGNITO_LOGOUT_URI
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: cognito-logout-uri
                
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                successThreshold: 1
                failureThreshold: 15
                httpGet:
                  path: /health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 5
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 8080-tcp
          protocol: TCP
          port: 80
          targetPort: 8080
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
