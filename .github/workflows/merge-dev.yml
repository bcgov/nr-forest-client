name: Merge to Dev

on:
  push:
    branches:
      - dev
  #   paths-ignore:
  #     - ".**"
  #     - "**.md"
  #     - "**.yml"
  #     - "**.yaml"
  # workflow_dispatch:

env:
  REGISTRY: ghcr.io
  NAME: nrfc
  NS: nr-d2723f

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  # https://github.com/marketplace/actions/ghcr-io-container-cleanup
  cleanup-ghcr:
    name: Cleanup Container Registry
    runs-on: ubuntu-22.04
    steps:
      - name: Delete old packages
        uses: davahome/ghcr-cleanup@v1.1.0.1
        with:
          delete_untagged: 1
          keep_versions: 10
          keep_versions_untagged: 0
          minimum_days: 14
          owner: orgs/bcgov
          package: ${{ github.event.repository.name }}
          skip_tags: prod-frontend,prod-backend
          token: ${{ secrets.GHCR_TOKEN }}

  codeql:
    name: Semantic Code Analysis
    runs-on: ubuntu-22.04
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # # SonarCloud runs in the main branch are needed to compare against PRs
  # sonarcloud:
  #   name: Static Analysis
  #   runs-on: ubuntu-22.04
  #   steps:
  #     - uses: actions/checkout@v2
  #       # Disable shallow clone for SonarCloud analysis
  #       with:
  #         fetch-depth: 0

  #     - name: Backend Tests
  #       run: |
  #         cd frontend
  #         npm ci
  #         npm run test:cov

  #     - name: Frontend Tests
  #       run: |
  #         cd frontend
  #         npm ci
  #         npm run test:cov

  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       with:
  #         args: >
  #           -Dsonar.exclusions=**/test/**,.github/**/*
  #           -Dsonar.organization=bcgov-sonarcloud
  #           -Dsonar.javascript.lcov.reportPaths=backend/coverage/lcov.info,frontend/coverage/lcov.info
  #           -Dsonar.cobertura.reportPaths=backend/coverage/cobertura-coverage.xml,frontend/coverage/cobertura-coverage.xml
  #           -Dsonar.project.monorepo.enabled=true
  #           -Dsonar.projectKey=greenfield-template
  #           -Dsonar.sources=backend,frontend
  #           -Dsonar.tests=backend/test,frontend/test

  deploy-test:
    name: TEST Deployment
    needs:
      - cleanup-ghcr
      - codeql
      # - sonarcloud
    runs-on: ubuntu-22.04
    environment:
      name: test
    env:
      ZONE: test
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.OC_NAMESPACE }}

          # Create frontend config (Remove the old one if exists)
          oc delete configmap ${{ env.NAME }}-${{ env.ZONE }}-frontend 2> /dev/null \
            || true && echo "No existing frontend config"
          oc create configmap ${{ env.NAME }}-${{ env.ZONE }}-frontend  \
            --from-literal=config.js="const config = (() => { return { VITE_BACKEND_URL: 'https://${{ env.NAME }}-${{ env.ZONE }}-backend.apps.silver.devops.gov.bc.ca' }; })();"

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-backend \
            -p NODE_ENV='development' \
            -p API_URL='https://nrfc-api-test.api.gov.bc.ca' \
            -p X_API_KEY=${{ secrets.GWA_X_API_KEY }} | oc apply -f -
          oc process -f .github/openshift/deploy.frontend.yml -p ZONE=${{ env.ZONE }} \
            -p PROMOTE=${{ github.repository }}:${{ env.ZONE }}-frontend | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-backend -w
          oc rollout status dc/${{ env.NAME }}-${{ env.ZONE }}-frontend -w

          # Remove completed build runs, build pods and deployment pods
          for p in $(oc get po | grep "Completed" | awk '{print $1}')
          do
            oc delete po ${p}
          done

  zap-backend:
    name: Backend Pen Tests
    needs:
      - deploy-test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-test-backend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  zap-frontend:
    name: Frontend Pen Tests
    needs:
      - deploy-test
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: https://${{ env.NAME }}-test-frontend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false
