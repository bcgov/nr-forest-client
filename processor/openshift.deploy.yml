apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nr-forest-client
  - name: COMPONENT
    description: Component name
    value: processor
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: TAG
    description: Image tag; e.g. PR number, latest or prod
    required: true
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: ORG
    description: Organization name
    value: bcgov
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: CPU_REQUEST
    value: 75m
  - name: CPU_LIMIT
    value: 200m
  - name: MEMORY_REQUEST
    value: 300Mi
  - name: MEMORY_LIMIT
    value: 400Mi
  - name: BCREGISTRY_URI
    description: Bc Registry API address
    required: true
objects:

  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: RollingUpdate
      template:
        metadata:
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "3100"
            prometheus.io/path: "/metrics"
          labels:
            app: ${NAME}-${ZONE}
            deployment: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          containers:
            - image: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT}:${TAG}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: POSTGRESQL_HOST
                  value: ${NAME}-${ZONE}-database
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: database-name
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: database-password
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: database-user
                - name: CLIENT_URI
                  value: http://${NAME}-${ZONE}-backend/api
                - name: LEGACY_URI
                  value: http://${NAME}-${ZONE}-legacy
                - name: TIMING
                  value: 30S
                - name: TZ
                  value: America/Vancouver
                - name: BCREGISTRY_URI
                  value: ${BCREGISTRY_URI}
                - name: BCREGISTRY_KEY
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: bcregistry-key
                - name: BCREGISTRY_ACCOUNT
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: bcregistry-account
                - name: PROCESSOR_SERVICE_ACCOUNT_NAME
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: processor-service-account-name
                - name: PROCESSOR_SERVICE_ACCOUNT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}
                      key: processor-service-account-secret
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                successThreshold: 1
                failureThreshold: 15
                httpGet:
                  path: /health
                  port: 3100
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 5
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 3100-tcp
          protocol: TCP
          port: 80
          targetPort: 3100
      selector:
        deployment: ${NAME}-${ZONE}-${COMPONENT}
