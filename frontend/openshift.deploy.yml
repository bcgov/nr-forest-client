apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "Nr-Old-Growth"
    tags: "nrfc"
    iconClass: icon-js
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: nr-forest-client
  - name: COMPONENT
    description: Component name
    value: frontend
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: TAG
    description: Image tag; e.g. PR number, latest or prod
    required: true
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: ORG
    description: Organization name
    value: bcgov
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: CPU_REQUEST
    value: 10m
  - name: MEMORY_REQUEST
    value: 50Mi
  - name: VITE_KEYCLOAK_URL
    value: https://loginproxy.gov.bc.ca/auth
  - name: VITE_KEYCLOAK_CLIENT_ID
    value: ""
  - name: LOG_LEVEL
    description: Caddy log level (debug, info, warn, error, panic, fatal)
    value: "info"
  - name: URL
    description: Frontend URL
    required: true
  - name: CONFIG_MAP
    description: Configuration map for params.js
    required: true
  - name: RANDOM_EXPRESSION
    description: Random expression to make sure deployments update
    from: "[a-zA-Z0-9]{32}"
    generate: expression
  - name: COGNITO_REGION
    description: Cognito region
    value: "ca-central-1"
  - name: COGNITO_DOMAIN
    description: Cognito domain
    value: "prod-fam-user-pool-domain"
objects:
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      selector:
        matchLabels:
          deployment: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: RollingUpdate
      template:
        metadata:
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "3000"
            prometheus.io/path: "/metrics"
          labels:
            app: ${NAME}-${ZONE}
            deployment: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          volumes:
            - name: app-config
              configMap:
                name: ${NAME}-${ZONE}-${COMPONENT}
            - name: env-config
              configMap:
                name: ${NAME}-${ZONE}-${COMPONENT}-config
          containers:
            - image: ${REGISTRY}/${ORG}/${NAME}/${COMPONENT}:${TAG}
              securityContext:
                capabilities:
                  add: ["NET_BIND_SERVICE"]
              env:
                - name: LOG_LEVEL
                  value: ${LOG_LEVEL}
                - name: BACKEND_URL
                  value: https://${NAME}-${ZONE}-backend.${DOMAIN}
                - name: FRONTEND_URL
                  value: https://${URL}
                - name: COGNITO_REGION
                  value: ${COGNITO_REGION}
                - name: COGNITO_DOMAIN
                  value: ${COGNITO_DOMAIN}
                - name: RANDOM_EXPRESSION
                  value: ${RANDOM_EXPRESSION}
              imagePullPolicy: Always
              name: ${NAME}
              volumeMounts:
                - name: app-config
                  mountPath: /srv/data/config.js
                  subPath: config.js
                - name: env-config
                  mountPath: /srv/data/params.js
                  subPath: params.js
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 30
                timeoutSeconds: 1
              livenessProbe:
                successThreshold: 1
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 15
                periodSeconds: 30
                timeoutSeconds: 5
  - kind: Service
    apiVersion: v1    
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        deployment: ${NAME}-${ZONE}-${COMPONENT}
  - kind: Route
    apiVersion: route.openshift.io/v1    
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
      annotations:
        haproxy.router.openshift.io/rate-limit-connections: "true"
        haproxy.router.openshift.io/rate-limit-connections.rate-http: "150"
        haproxy.router.openshift.io/rate-limit-connections.rate-tcp: "75"
    spec:
      host: ${URL}
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}-config
    data:
      params.js: |
        ${CONFIG_MAP}
